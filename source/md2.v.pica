; setup constants
	; normals
	.constfa normalsArray[]
		.constfa (-0.525731, 0.000000, 0.850651, 0.0)
		.constfa (-0.442863, 0.238856, 0.864188, 1.0)
		.constfa (-0.295242, 0.000000, 0.955423, 2.0)
		.constfa (-0.309017, 0.500000, 0.809017, 3.0)
		.constfa (-0.162460, 0.262866, 0.951056, 4.0)
		.constfa (0.000000, 0.000000, 1.000000, 5.0)
		.constfa (0.000000, 0.850651, 0.525731, 6.0)
		.constfa (-0.147621, 0.716567, 0.681718, 7.0)
		.constfa (0.147621, 0.716567, 0.681718, 8.0)
		.constfa (0.000000, 0.525731, 0.850651, 9.0)
		.constfa (0.309017, 0.500000, 0.809017, 10.0)
		.constfa (0.525731, 0.000000, 0.850651, 11.0)
		.constfa (0.295242, 0.000000, 0.955423, 12.0)
		.constfa (0.442863, 0.238856, 0.864188, 13.0)
		.constfa (0.162460, 0.262866, 0.951056, 14.0)
		.constfa (-0.681718, 0.147621, 0.716567, 15.0)
		.constfa (-0.809017, 0.309017, 0.500000, 16.0)
		.constfa (-0.587785, 0.425325, 0.688191, 17.0)
		.constfa (-0.850651, 0.525731, 0.000000, 18.0)
		.constfa (-0.864188, 0.442863, 0.238856, 19.0)
		.constfa (-0.716567, 0.681718, 0.147621, 20.0)
		.constfa (-0.688191, 0.587785, 0.425325, 21.0)
		.constfa (-0.500000, 0.809017, 0.309017, 22.0)
		.constfa (-0.238856, 0.864188, 0.442863, 23.0)
		.constfa (-0.425325, 0.688191, 0.587785, 24.0)
		.constfa (-0.716567, 0.681718, -0.147621, 25.0)
		.constfa (-0.500000, 0.809017, -0.309017, 26.0)
		.constfa (-0.525731, 0.850651, 0.000000, 27.0)
		.constfa (0.000000, 0.850651, -0.525731, 28.0)
		.constfa (-0.238856, 0.864188, -0.442863, 29.0)
		.constfa (0.000000, 0.955423, -0.295242, 30.0)
		.constfa (-0.262866, 0.951056, -0.162460, 31.0)
		.constfa (0.000000, 1.000000, 0.000000, 32.0)
		.constfa (0.000000, 0.955423, 0.295242, 33.0)
		.constfa (-0.262866, 0.951056, 0.162460, 34.0)
		.constfa (0.238856, 0.864188, 0.442863, 35.0)
		.constfa (0.262866, 0.951056, 0.162460, 36.0)
		.constfa (0.500000, 0.809017, 0.309017, 37.0)
		.constfa (0.238856, 0.864188, -0.442863, 38.0)
		.constfa (0.262866, 0.951056, -0.162460, 39.0)
		.constfa (0.500000, 0.809017, -0.309017, 40.0)
		.constfa (0.850651, 0.525731, 0.000000, 41.0)
		.constfa (0.716567, 0.681718, 0.147621, 42.0)
		.constfa (0.716567, 0.681718, -0.147621, 43.0)
		.constfa (0.525731, 0.850651, 0.000000, 44.0)
		.constfa (0.425325, 0.688191, 0.587785, 45.0)
		.constfa (0.864188, 0.442863, 0.238856, 46.0)
		.constfa (0.688191, 0.587785, 0.425325, 47.0)
		.constfa (0.809017, 0.309017, 0.500000, 48.0)
		.constfa (0.681718, 0.147621, 0.716567, 49.0)
		.constfa (0.587785, 0.425325, 0.688191, 50.0)
		.constfa (0.955423, 0.295242, 0.000000, 51.0)
		.constfa (1.000000, 0.000000, 0.000000, 52.0)
		.constfa (0.951056, 0.162460, 0.262866, 53.0)
		.constfa (0.955423, -0.295242, 0.000000, 54.0)
		.constfa (0.864188, -0.442863, 0.238856, 55.0)
		.constfa (0.951056, -0.162460, 0.262866, 56.0)
		.constfa (0.809017, -0.309017, 0.500000, 57.0)
		.constfa (0.681718, -0.147621, 0.716567, 58.0)
		.constfa (0.850651, 0.000000, 0.525731, 59.0)
		.constfa (0.864188, 0.442863, -0.238856, 60.0)
		.constfa (0.809017, 0.309017, -0.500000, 61.0)
		.constfa (0.951056, 0.162460, -0.262866, 62.0)
		.constfa (0.681718, 0.147621, -0.716567, 63.0)
		.constfa (0.850651, 0.000000, -0.525731, 64.0)
		.constfa (0.951056, -0.162460, -0.262866, 65.0)
		.constfa (0.147621, 0.716567, -0.681718, 66.0)
		.constfa (0.309017, 0.500000, -0.809017, 67.0)
		.constfa (0.425325, 0.688191, -0.587785, 68.0)
		.constfa (0.442863, 0.238856, -0.864188, 69.0)
		.constfa (0.587785, 0.425325, -0.688191, 70.0)
		.constfa (0.688191, 0.587785, -0.425325, 71.0)
		.constfa (-0.147621, 0.716567, -0.681718, 72.0)
		.constfa (-0.309017, 0.500000, -0.809017, 73.0)
		.constfa (0.000000, 0.525731, -0.850651, 74.0)
		.constfa (-0.442863, 0.238856, -0.864188, 75.0)
		.constfa (-0.162460, 0.262866, -0.951056, 76.0)
		.constfa (0.162460, 0.262866, -0.951056, 77.0)
		.constfa (0.425325, -0.688191, 0.587785, 78.0)
		.constfa (0.587785, -0.425325, 0.688191, 79.0)
		.constfa (0.688191, -0.587785, 0.425325, 80.0)
		.constfa (-0.688191, -0.587785, -0.425320, 81.0)
	.end

	; stuff
	.constf constvect82(82.0, 0.5, 0.0, 1.0)
	.alias  zeros constvect82.zzzz ; Vector full of zeros
	.alias  ones  constvect82.wwww ; Vector full of ones
	.alias  half  constvect82.yyyy
 
; setup outmap
	.out outpos position
	.out outtc0 texcoord0
	.out outtc1 texcoord1
	.out outclr color
	.out outview view
	.out outnq normalquat

; setup uniform map
	.fvec frameParam     ; x = interp factor, y = 1 / skin width, z = 1 / skin height, w alpha
	.fvec projection[4]  ; c84-c87 = projection matrix
	.fvec modelview[4]   ; c88-c91 = modelview matrix
	.fvec scale0         ; w = brightness
	.fvec translation0
	.fvec scale1
	.fvec translation1

; code
.proc main
		; get vertex position (interpolate)
			; scale + translate frame0 vertex
			mov r1.xyz, v0
			mul r1.xyz, scale0, r1
			add r1.xyz, translation0, r1

			; scale + translate frame1 vertex
			mov r2.xyz, v1
			mul r2.xyz, scale1, r2
			add r2.xyz, translation1, r2

			; interpolate
			add r2, r2, -r1
			mad r1, r2, frameParam.xxxx, r1

			; set w
			mov r1.w, constvect82.w

		; get normal (interpolate)
			; grab frame0 normal from index
			mov r0, v0
			call get_normal
			mov r2, r0

			; grab frame1 normal from index
			mov r0, v1
			call get_normal
			mov r3, r0

			; interpolate
			add r3, r3, -r2
			mad r2, r3, frameParam.xxxx, r2

		; tempreg = mdlvMtx * in.pos
			dp4 r0.x, modelview[0], r1
			dp4 r0.y, modelview[1], r1
			dp4 r0.z, modelview[2], r1
			mov r0.w, constvect82.w

		mov outview, -r0

		; normalquat code stolen from fincs
		dp3 r14.x, modelview[0], r2
		dp3 r14.y, modelview[1], r2
		dp3 r14.z, modelview[2], r2
		dp3 r6.x, r14, r14
		rsq r6.x, r6.x
		mul r14.xyz, r14.xyz, r6.x

		mov r3, constvect82.wzzz
		add r4, ones, r14.z
		mul r4, half, r4
		cmp zeros, ge, ge, r4.x
		rsq r4, r4.x
		mul r5, half, r14
		jmpc cmp.x, degenerate

		rcp r3.z, r4.x
		mul r3.xy, r5, r4

		degenerate:
			mov outnq, r3

		; result.pos = projMtx * tempreg
			dp4 outpos.x, projection[0], r0
			dp4 outpos.y, projection[1], r0
			dp4 outpos.z, projection[2], r0
			dp4 outpos.w, projection[3], r0

		; result.texcoord = in.texcoord
			mul r3.xy,  frameParam.yz,  v2.xy ; divide by skin dimensions
			mov outtc0, r3
			mov outtc1, r3
			
		; result.color = vertex lighting
			; mov r4, constvect82.yyyw
			; dp3 r4.xyz, r2, r4
			; mul outclr.xyz, scale0.wwww, r4
			mov outclr.xyz, ones
			mov outclr.w, frameParam.w
			
		end
.end

; input : r0.w = normal index
; output : r0 = normal vector
.proc get_normal
		cmp constvect82.xxxx, GT, GT, r0.wwww

		ifc cmp.x
			mova a01, r0.w
			mov r0.xyz, normalsArray[a0]
		.else
			add r0.w, -constvect82.x, r0.w
			mova a01, r0.w
			mov r0.xyz, -normalsArray[a0]
		.end
.end
